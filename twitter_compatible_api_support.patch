Index: twitter.py
===================================================================
--- twitter.py	(Revision 177)
+++ twitter.py	(Arbeitskopie)
@@ -1285,6 +1285,7 @@
   _API_REALM = 'Twitter API'
 
   def __init__(self,
+               siteurl='http://twitter.com',
                username=None,
                password=None,
                input_encoding=None,
@@ -1293,6 +1294,7 @@
     '''Instantiate a new twitter.Api object.
 
     Args:
+      siteurl: The URL of the Twitter-like site to connect to. [optional]
       username: The username of the twitter account.  [optional]
       password: The password for the twitter account. [optional]
       input_encoding: The encoding used to encode input strings. [optional]
@@ -1308,7 +1310,7 @@
     self._InitializeUserAgent()
     self._InitializeDefaultParameters()
     self._input_encoding = input_encoding
-    self.SetCredentials(username, password)
+    self.SetCredentials(siteurl, username, password)
 
   def GetPublicTimeline(self, since_id=None):
     '''Fetch the sequnce of public twitter.Status message for all users.
@@ -1324,7 +1326,7 @@
     parameters = {}
     if since_id:
       parameters['since_id'] = since_id
-    url = 'http://twitter.com/statuses/public_timeline.json'
+    url = '%s/statuses/public_timeline.json' % self._siteurl
     json = self._FetchUrl(url,  parameters=parameters)
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1358,11 +1360,11 @@
       A sequence of twitter.Status instances, one for each message
     '''
     if user:
-      url = 'http://twitter.com/statuses/friends_timeline/%s.json' % user
+      url = '%s/statuses/friends_timeline/%s.json' % (self._siteurl, user)
     elif not user and not self._username:
       raise TwitterError("User must be specified if API is not authenticated.")
     else:
-      url = 'http://twitter.com/statuses/friends_timeline.json'
+      url = '%s/statuses/friends_timeline.json' % self._siteurl
     parameters = {}
     if count is not None:
       try:
@@ -1423,16 +1425,15 @@
     parameters = {}
 
     if id:
-      url = 'http://twitter.com/statuses/user_timeline/%s.json' % id
+      url = '%s/statuses/user_timeline/%s.json' % (self._siteurl, id)
     elif user_id:
-      url = 'http://twitter.com/statuses/user_timeline.json?user_id=%d' % user_id
+      url = '%s/statuses/user_timeline.json?user_id=%d' % (self._siteurl, user_id)
     elif screen_name:
-      url = ('http://twitter.com/statuses/user_timeline.json?screen_name=%s' %
-             screen_name)
+      url = '%s/statuses/user_timeline.json?screen_name=%s' % (self.site_url, screen_name)
     elif not self._username:
       raise TwitterError("User must be specified if API is not authenticated.")
     else:
-      url = 'http://twitter.com/statuses/user_timeline.json'
+      url = '%s/statuses/user_timeline.json' % self._siteurl
 
     if since_id:
       try:
@@ -1479,7 +1480,7 @@
         long(id)
     except:
       raise TwitterError("id must be an long integer")
-    url = 'http://twitter.com/statuses/show/%s.json' % id
+    url = '%s/statuses/show/%s.json' % (self._siteurl, id)
     json = self._FetchUrl(url)
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1502,7 +1503,7 @@
         long(id)
     except:
       raise TwitterError("id must be an integer")
-    url = 'http://twitter.com/statuses/destroy/%s.json' % id
+    url = '%s/statuses/destroy/%s.json' % (self._siteurl, id)
     json = self._FetchUrl(url, post_data={})
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1529,7 +1530,7 @@
     if not self._username:
       raise TwitterError("The twitter.Api instance must be authenticated.")
 
-    url = 'http://twitter.com/statuses/update.json'
+    url = '%s/statuses/update.json' % self._siteurl
 
     if len(status) > CHARACTER_LIMIT:
       raise TwitterError("Text must be less than or equal to %d characters. "
@@ -1591,7 +1592,7 @@
     Returns:
       A sequence of twitter.Status instances, one for each reply to the user.
     '''
-    url = 'http://twitter.com/statuses/replies.json'
+    url = '%s/statuses/replies.json' % self._siteurl
     if not self._username:
       raise TwitterError("The twitter.Api instance must be authenticated.")
     parameters = {}
@@ -1621,9 +1622,9 @@
     if not self._username:
       raise TwitterError("twitter.Api instance must be authenticated")
     if user:
-      url = 'http://twitter.com/statuses/friends/%s.json' % user 
+      url = '%s/statuses/friends/%s.json' % (self._siteurl, user)
     else:
-      url = 'http://twitter.com/statuses/friends.json'
+      url = '%s/statuses/friends.json' % self._siteurl
     parameters = {}
     if page:
       parameters['page'] = page
@@ -1642,7 +1643,7 @@
     '''
     if not self._username:
       raise TwitterError("twitter.Api instance must be authenticated")
-    url = 'http://twitter.com/statuses/followers.json'
+    url = '%s/statuses/followers.json' % self._siteurl
     parameters = {}
     if page:
       parameters['page'] = page
@@ -1659,7 +1660,7 @@
     Returns:
       A sequence of twitter.User instances
     '''
-    url = 'http://twitter.com/statuses/featured.json'
+    url = '%s/statuses/featured.json' % self._siteurl
     json = self._FetchUrl(url)
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1676,7 +1677,7 @@
     Returns:
       A twitter.User instance representing that user
     '''
-    url = 'http://twitter.com/users/show/%s.json' % user
+    url = '%s/users/show/%s.json' % (self._siteurl, user)
     json = self._FetchUrl(url)
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1698,7 +1699,7 @@
     Returns:
       A sequence of twitter.DirectMessage instances
     '''
-    url = 'http://twitter.com/direct_messages.json'
+    url = '%s/direct_messages.json' % self._siteurl
     if not self._username:
       raise TwitterError("The twitter.Api instance must be authenticated.")
     parameters = {}
@@ -1727,7 +1728,7 @@
     '''
     if not self._username:
       raise TwitterError("The twitter.Api instance must be authenticated.")
-    url = 'http://twitter.com/direct_messages/new.json'
+    url = '%s/direct_messages/new.json' % self._siteurl
     data = {'text': text, 'user': user}
     json = self._FetchUrl(url, post_data=data)
     data = simplejson.loads(json)
@@ -1747,7 +1748,7 @@
     Returns:
       A twitter.DirectMessage instance representing the message destroyed
     '''
-    url = 'http://twitter.com/direct_messages/destroy/%s.json' % id
+    url = '%s/direct_messages/destroy/%s.json' % (self._siteurl, id)
     json = self._FetchUrl(url, post_data={})
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1763,7 +1764,7 @@
     Returns:
       A twitter.User instance representing the befriended user.
     '''
-    url = 'http://twitter.com/friendships/create/%s.json' % user
+    url = '%s/friendships/create/%s.json' % (self._siteurl, user)
     json = self._FetchUrl(url, post_data={})
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1779,7 +1780,7 @@
     Returns:
       A twitter.User instance representing the discontinued friend.
     '''
-    url = 'http://twitter.com/friendships/destroy/%s.json' % user
+    url = '%s/friendships/destroy/%s.json' % (self._siteurl, user)
     json = self._FetchUrl(url, post_data={})
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1796,7 +1797,7 @@
     Returns:
       A twitter.Status instance representing the newly-marked favorite.
     '''
-    url = 'http://twitter.com/favorites/create/%s.json' % status.id
+    url = '%s/favorites/create/%s.json' % (self._siteurl, status.id)
     json = self._FetchUrl(url, post_data={})
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1813,7 +1814,7 @@
     Returns:
       A twitter.Status instance representing the newly-unmarked favorite.
     '''
-    url = 'http://twitter.com/favorites/destroy/%s.json' % status.id
+    url = '%s/favorites/destroy/%s.json' % (self._siteurl, status.id)
     json = self._FetchUrl(url, post_data={})
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
@@ -1827,25 +1828,28 @@
     Returns:
       A twitter.User instance representing that user
     '''
-    url = 'http://twitter.com/users/show.json?email=%s' % email
+    url = '%s/users/show.json?email=%s' % (self._siteurl, email)
     json = self._FetchUrl(url)
     data = simplejson.loads(json)
     self._CheckForTwitterError(data)
     return User.NewFromJsonDict(data)
 
-  def SetCredentials(self, username, password):
+  def SetCredentials(self, siteurl, username, password):
     '''Set the username and password for this instance
 
     Args:
+      siteurl:  The URL of the Twitter-like site.
       username: The twitter username.
       password: The twitter password.
     '''
+    self._siteurl  = siteurl
     self._username = username
     self._password = password
 
   def ClearCredentials(self):
     '''Clear the username and password for this instance
     '''
+    self._siteurl = None
     self._username = None
     self._password = None
 
